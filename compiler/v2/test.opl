#define TEST_INT(want, got) testInt(want, got, #got)
var (passed int, failed int)

func main() int {
  TEST_INT(42, testIntConstant());
  TEST_INT(30, testFourArith());
  TEST_INT(5,  testUnaryPM());
  TEST_INT(2,  testMulUnary());
  TEST_INT(0,  testRelOp());
  TEST_INT(1,  testRelOp2());
  TEST_INT(1,  testRelOp3());
  TEST_INT(1,  testRelOp4());
  TEST_INT(15, testLVar());
  TEST_INT(6,  testScope());
  TEST_INT(42, testReturn());
  TEST_INT(2,  testIf());
  TEST_INT(0,  testIfNot());
  TEST_INT(2,  testIfVar());
  TEST_INT(4,  testIfElse());
  TEST_INT(5,  testNestedIf());
  TEST_INT(8,  testAssign());
  TEST_INT(38, testAssign2());
  TEST_INT(42, testAssign3());
  TEST_INT(9,  testAssign4());
  TEST_INT(55, testFor());
  TEST_INT(55, testFor2());
  TEST_INT(9,  testNestedFor());
  TEST_INT(39, testExternalFunc());
  TEST_INT(42, testCallPointer());
  TEST_INT(43, testFuncArg());
  TEST_INT(4,  testSizeofUserType());
  TEST_INT(6,  testTypeCast());
  TEST_INT(57, testDefFunc());
  TEST_INT(5,  testDefFuncWithArg());
  TEST_INT(42, testGVar());
  TEST_INT(-2, testReturnType());
  TEST_INT(12, testCompoundAssign());
  TEST_INT(3,  testGVar2());
  TEST_INT(21, testRecursion());
  TEST_INT(5 , testPtrWrite());
  TEST_INT(4 , testPtrRead());
  TEST_INT(14, testPtrPtr());
  TEST_INT(3 , testPtrFunc());
  TEST_INT(4 , testVarPtr());
  TEST_INT(42, testVarFuncPtr());
  TEST_INT(16, testPtrAddInt());
  TEST_INT(24, testPtrSubInt());
  TEST_INT(2 , testPtrSubPtr());
  TEST_INT(-1, testSignExtended());
  TEST_INT(3,  testZeroExtended());
  TEST_INT(1,  testBoolCast());
  TEST_INT(1,  testBoolCast2());
  TEST_INT(4,  testArrayPtr());
  TEST_INT(4 , testIntArray());
  TEST_INT(7 , testFuncArray());
  TEST_INT(4 , testInt8Array());
  TEST_INT(10, testInt16Ptr());
  TEST_INT(28, testInt32Ptr());
  TEST_INT(33, testStr());
  TEST_INT(5 , testStrlen());
  TEST_INT(6 , testSizeofStr());
  TEST_INT(10, testStrEscape());
  TEST_INT(4 , testPtrInt8());
  TEST_INT(33, testPtrChar());
  TEST_INT(1 , testPtrChar2());
  TEST_INT(1 , testVarInt8());
  TEST_INT(33, testAsciiExpr());
  TEST_INT(4 , testLogicalOp());
  TEST_INT(1 , testLogicalOp2());
  TEST_INT(2 , testLogicalOp3());
  TEST_INT(3 , testBreak());
  TEST_INT(10, testContinue());
  TEST_INT(12, testContinue2());
  TEST_INT(10, testBreak2());
  TEST_INT(42, testBreak3());
  TEST_INT(5,  testUInt());
  TEST_INT(1,  testUInt2());
  TEST_INT(4,  testIncDec());
  TEST_INT(7,  testVariadicArg());
  TEST_INT(31, testHexLiteral());
  TEST_INT(6,  testBinaryLiteral());
  TEST_INT(7,  testArrayInit());
  TEST_INT(6,  testArrayAssign());
  TEST_INT(-3, testStruct());
  TEST_INT(5,  testStructPtr());
  TEST_INT(6,  testStructInit());
  TEST_INT(-5, testStructAssign());
  TEST_INT(0xae, testArrayUInt8());
  TEST_INT(0xae, testStructUInt8());
  TEST_INT(5,  testStructArrowOp());
  TEST_INT(8,  testStructArg());
  TEST_INT(42, testRecursiveType());
  TEST_INT(0x10f, testGVarInitList());
  TEST_INT(2,  testGVarInitList2());
  TEST_INT(9,  testGVarInitList3());
  TEST_INT(9,  testGVarInitList4());
  TEST_INT(1,  testGNestedStruct());
  TEST_INT(42, testComplexSubscr());
  TEST_INT(5,  testGenericAdd());
  TEST_INT(4,  testGenericMemberAccess());
  TEST_INT(3,  testGenericStruct());
  TEST_INT(7,  testGenericNested());
  TEST_INT(42, testGenericNested2());
  TEST_INT(4,  testGenericFunc());
  TEST_INT(1,  testGenericFunc2());

  printf("%ld passed, %ld failed\n", passed, failed);
  return failed > 0;
}

func testInt(want, got int, gots *byte) {
  if want == got {
    printf("[  OK  ]: ");
    passed += 1;
  } else {
    printf("[FAILED]: ");
    failed += 1;
  }

  printf("%s -> %ld", gots, got);

  if want != got {
    printf(", want %ld", want);
  }
  printf("\n");
}

func testIntConstant() int { return 42; }
func testFourArith() int { return (1+2) / 2+ (( 3 -4) +5 *  6 ); }
func testUnaryPM() int { return -3 + (+8); }
func testMulUnary() int { return -2 * -1; }
func testRelOp() int { return 3 < (1 + 1); }
func testRelOp2() int { return 3 > (1 + 1); }
func testRelOp3() int { return 2*3 >= 13/2; }
func testRelOp4() int { return 2>2 == 4<=3; }
func testLVar() int { foo:=5; bar:=3; return foo*bar; }
func testScope() int { foo:=2; { foo:=3; } return foo+4; }
func testReturn() int { return 41+1; 3; }
func testIf() int { if 42 > 10 { return 2; } }
func testIfNot() int { if 42 < 10 { return 2; } }
func testIfVar() int { cond := 10 < 200; if cond { return 2; } }
func testIfElse() int { if 0 { return 3; } else { return 4; } }
func testNestedIf() int { if 0 { return 3; } else if 1 { return 5; } else { return 4; } }
func testAssign() int { foo := 3; foo = 4; return foo * 2; }
func testAssign2() int { foo:=5; bar:=7; foo=(bar=1)=42; return foo-4; }
func testAssign3() int { foo:=5; bar:=7; return foo=bar=42; }
func testAssign4() int { a:=5; a=b:=3; return a*b; }
func testFor() int { i:=0; s:=0; for i <= 10 { s=s+i; i=i+1; } return s; }
func testFor2() int { s:=0; for i:=0; i<=10; i=i+1 { s=s+i; } return s; }
func testNestedFor() int { s:=0; for i:=1;i<3;i=i+1{ for j:=1;j<3;j=j+1{ s=s+i*j; } } return s; }
func testExternalFunc() int { return func42() - 3; }
func testCallPointer() int { return funcfunc42()(); }
func testFuncArg() int { return add((1+2)*(3+4), add(func42(), 1)) - 21; }
func testSizeofUserType() int { return sizeof(myInt); }
func testTypeCast() int { return (3@myInt2 + 2@int2) + 5; }
func testDefFunc() int {return add(sum10(), 2);}
func testDefFuncWithArg() int {return myAdd(-3,8);}
func testGVar() int { var (v int = val*3) return v; }
func testReturnType() int {return addInt2(-3,8,1);}
func testCompoundAssign() int { i := 1; i += 2; j := 3; return i *= 1 + j; }
func testGVar2() int { return ga+gb; }
func testRecursion() int{return fib(8);}
func testPtrWrite() int{ i := 42; p := &i; *p = 3; return i + 2; }
func testPtrRead() int{ i := 42; p := &i; i = 3; j := *p; return j + 1; }
func testPtrPtr() int{ i := 7; p := &i; q := &p; return **q + *&i; }
func testPtrFunc() int{ i:=42; ptrWrite(&i); return i; }
func testVarPtr() int { var i int; var p *int = &i; i = 42; i = 3; return *p + 1; }
func testVarFuncPtr() int { var f *func() func() int; f = &funcfunc42; return f()(); }
func testPtrAddInt() int { var p *int = 8; return (p+1)@int; }
func testPtrSubInt() int { var p *int = 32; return (p-1)@int; }
func testPtrSubPtr() int { var p *int = 8; var q *int = 24; return q-p; }
func testSignExtended() int { return 3@int2; }
func testZeroExtended() int { return 3@uint2; }
func testBoolCast() int { return 4@bool; }
func testBoolCast2() bool { return 2; }
func testArrayPtr() int { p:=alloc4(3,4,5,6); return *(p+1); }
func testIntArray() int { var arr [3]int; for i:=0;i<3;i+=1{arr[i]=i*2;} return arr[2]; }
func testFuncArray() int { var arr [3]*func(a,b int)int; arr[1]=&add; return arr[1](3,4); }
func testInt8Array() int { var arr [3]int8; arr[0]=-1;arr[1]=5;arr[2]=arr[0]+arr[1]; return arr[2]; }
func testInt16Ptr() int { var p *int16 = 8; return (p+1)@int64; }
func testInt32Ptr() int { var p *int32 = 32; return (p-1)@int64; }
func testStr() int { return "abc!def"[3]; }
func testStrlen() int { return strlen("world"); }
func testSizeofStr() int { return sizeof("abcdef"); }
func testStrEscape() int { return "\n"[0]; }
func testPtrInt8() int { var x [2]int8; x[0]=1; x[1]=2; p:=&x[0]; p[1]=3; return x[1]+1; }
func testPtrChar() int { p := &" !"[0]; return p[1]; }
func testPtrChar2() int { p := &" !"[0]; if p[0]==32 { return 1; } else { return 2; } }
func testVarInt8() int { var a [1]int8; var b int8 = a[0]; a[0]=1; b=2; return a[0]; }
func testAsciiExpr() int { return '!' + '\t' - 9; }
func testLogicalOp() int { i := 3; if i==1 && 2==1 || i==3 { return 4; } else { return 5; } }
func testLogicalOp2() int { v := 5 && 6 || 7; return v; }
func testLogicalOp3() int { v := 2; 42 || (v = 3); return v; }
func testBreak() int { i := 1; for i < 10 { if i == 3 { break; } i += 1; } return i; }
func testContinue() int { i := 1; for i < 10 { i = 10; continue; i = 42; } return i; }
func testContinue2() int { i := 1; for i = 1; i < 12; i += 1 { continue; } return i; }
func testBreak2() int {i:=1; for{if i>=10{break;} i=10;continue; return i = 42;} return i;}
func testBreak3() int {i:=1; for{if i>=42{break;} i+=1;continue;} return i;}
func testUInt() int { var i uint = 7; return i - 2@uint; }
func testUInt2() int { var i uint = -1; return i > 3@uint; }
func testIncDec() int { i := 3; i++; i++; i--; return i; }
func testVariadicArg() int { return variadic_sum(3, 4, 5, -2); }
func testHexLiteral() int { return 0x001f; }
func testBinaryLiteral() int { return 0b0110; }
func testArrayInit() int { var x [3]int = {3, 4}; return x[0] + x[1] + x[2]; }
func testArrayAssign() int { var x [3]int; x = {2, 3}; return x[0] * x[1]; }
func testStruct() int { var x struct{a int;b int;}; x.a=2; x.b=5; return x.a-x.b; }
func testStructPtr() int { var p *Pair; var x Pair; p=&x; x.a=2; return (*p).a+3;}
func testStructInit() int { var x struct{a int;b int;c int;} = {5, -1}; return x.a-x.b+x.c; }
func testStructAssign() int { var x Triple; x = {5, -1}; return x.a*x.b+x.c; }
func testArrayUInt8() int { var x [3]uint8={0xdead@uint16,1@uint16}; return x[0]+x[1]+x[2]; }
func testStructUInt8() int { var x struct{a uint8;b uint8;}={0xdead,1}; return x.a+x.b; }
func testStructArrowOp() int { var x Pair = {3, 2}; p := &x; return p->a + x.b; }
func testStructArg() int { var x Pair = {7}; myIncField(&x); return x.a; }
func testRecursiveType() int { var x Node={42}; var y Node={2, &x}; return y.next->value; }
func testGVarInitList() int { return gnode.value + gnode.next@int; }
func testGVarInitList2() int { return gnode2.value + gnode2.next@int - (&gnode)@int; }
func testGVarInitList3() int { return garr8[0] + garr8[1] + garr8[2]; }
func testGVarInitList4() int { return gpair8.a + gpair8.b; }
func testGNestedStruct() int { return grect.pos.a==2 && grect.pos.b==3 && grect.size.a==4; }
func testComplexSubscr() int { var x [1]int = {42}; i:=0; j:=1; return x[i*2+j-1]; }
func testGenericAdd() int { return Add@<int>(2, 3); }
func testGenericMemberAccess() int { var x Pair={2,3}; return GetB@<Pair>(&x)+1; }
func testGenericStruct() int { var x GPair<int8>; x.a=2; x.b=5; return x.a+&x.b-&x.a; }
func testGenericNested() int { var x GPair<GPair<int8>>; x.a.a=2; x.b.b=5; return x.a.a+x.b.b; }
func testGenericNested2() int { var x GNode<int>={42,0}; var y GNode<int>={1,&x}; return y.next->value; }
func testGenericFunc() int { var x Pair={2,3}; return GetBNested@<Pair>(&x)+1; }
func testGenericFunc2() int { var x Pair={2,3}; return GetANested2@<Pair>(&x)-1; }

extern "C" func42 func()int;
extern "C" funcfunc42 func() *func()int;
extern "C" add func(a, b int) int;
func sum10()int{s:=0; for i:=1;i<=10;i=i+1 {s=s+i;} return s;}
func myAdd(a,b int)int{return a+b;}
func fib(n int)int{ if n<=1 {return n;} else {return fib(n-1)+fib(n-2);} }
var val int = 14;
var (ga int, gb = gc+1, gc = 2)
func addInt2(a, b int, c int2) int {return c=a+b+c;}
type myInt int32;
type myInt2 int2;
func ptrWrite(p *int){ *p = 3; }
extern "C" alloc4 func(a, b, c, d int) *int;
extern "C" strlen func(s *byte)int64;
extern "C" variadic_sum func(argc int, ...) int;
type Pair struct{a int; b int;};
type Triple struct{a int; b int; c int;};
func myIncField(x *Pair) { x->a++; }
type Node struct { value int; next *Node; };
var (gnode Node = {15,0x100}, gnode2 Node = {2,&gnode})
var garr8 [3]int8 = {2,7};
var gpair8 struct{a int8; b int8;} = {2,7};
type Rect struct{pos Pair; size Pair;};
var grect Rect = {{2,3},{4,5}};
func Add<T>(a, b T) T { return a + b; }
func GetB<T>(v *T) int { return v->b; }
type GPair<T> struct{a T; b T;};
type GNode<T> struct{ value T; next *GNode<T>; };
func GetBNested<T>(v *T) int { return GetB@<T>(v); }
func GetA<T>(v *T) int { return v->a; }
func GetANested<T>(v *T) int { return GetA@<T>(v); }
func GetANested2<T>(v *T) int { return GetANested@<T>(v); }

extern "C" printf func(format *byte, ...) int;
